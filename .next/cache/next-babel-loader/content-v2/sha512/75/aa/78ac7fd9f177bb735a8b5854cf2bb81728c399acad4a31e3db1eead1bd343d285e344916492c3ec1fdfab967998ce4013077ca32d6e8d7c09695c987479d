{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\rvrus\\\\GoogleDrive\\\\Source\\\\ZTM\\\\Junior\\\\ssr-robofriends\\\\containers\\\\Home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../redux/actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'; // parameter state comes from index.js provider store state(rootReducers)\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  };\n}; // dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass Home extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {\n      robots,\n      searchField,\n      onSearchChange,\n      isPending\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tc\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"f1\",\n        children: \"RoboFriends\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        searchChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        children: isPending ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ErrorBoundry, {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n} // action done from mapDispatchToProps will channge state from mapStateToProps\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","map":{"version":3,"sources":["C:/Users/rvrus/GoogleDrive/Source/ZTM/Junior/ssr-robofriends/containers/Home.js"],"names":["React","Component","connect","setSearchField","requestRobots","CardList","SearchBox","Scroll","ErrorBoundry","mapStateToProps","state","searchField","searchRobots","robots","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestRobots","Home","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,kBAA9C;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,YAAP,MAAyB,4BAAzB,C,CAEA;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAD3B;AAELE,IAAAA,MAAM,EAAEH,KAAK,CAACN,aAAN,CAAoBS,MAFvB;AAGLC,IAAAA,SAAS,EAAEJ,KAAK,CAACN,aAAN,CAAoBU;AAH1B,GAAP;AAKD,CAND,C,CAQA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACb,cAAc,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAELC,IAAAA,eAAe,EAAE,MAAML,QAAQ,CAACZ,aAAa,EAAd;AAF1B,GAAP;AAID,CALD;;AAOA,MAAMkB,IAAN,SAAmBrB,SAAnB,CAA6B;AAC3BsB,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWH,eAAX;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEZ,MAAAA,MAAF;AAAUF,MAAAA,WAAV;AAAuBM,MAAAA,cAAvB;AAAuCH,MAAAA;AAAvC,QAAqD,KAAKU,KAAhE;AACA,UAAME,cAAc,GAAGb,MAAM,CAACc,MAAP,CAAeC,KAAD,IAAW;AAC9C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCpB,WAAW,CAACmB,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAW,QAAA,YAAY,EAAEb;AAAzB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAA,kBACGH,SAAS,gBACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR,QAAC,YAAD;AAAA,iCACE,QAAC,QAAD;AAAU,YAAA,MAAM,EAAEY;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AAzB0B,C,CA4B7B;;;AACA,eAAexB,OAAO,CAACO,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CO,IAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../redux/actions';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n  };\r\n};\r\n\r\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\r\n// the function returns an object then uses connect to change the data from redecers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass Home extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchField, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          {isPending ? (\r\n            <h1>Loading</h1>\r\n          ) : (\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobots} />\r\n            </ErrorBoundry>\r\n          )}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// action done from mapDispatchToProps will channge state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n"]},"metadata":{},"sourceType":"module"}